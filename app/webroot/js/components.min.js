class DmbAddCommand extends DumboDirective {
    constructor() {
        super();
    }

    init() {
        this.classList.add('icon');
        this.classList.add('button');
        this.classList.add('icon-plus1');

        this.addEventListener('click', e => {
            this.handleClick(e);
        });
    }

    handleClick(e) {
        const target = e.target;
        const id = document.createElement('input');
        const projectid = document.createElement('input');
        const command = document.createElement('dmb-input');
        const form = target.closest('dmb-content');
        let counter = parseInt(target.getAttribute('counter'));

        id.setAttribute('type', 'hidden');
        id.setAttribute('value', '');
        id.setAttribute('name', `command[${counter}][id]`);

        projectid.setAttribute('type', 'hidden');
        projectid.setAttribute('value', target.getAttribute('project-id'));
        projectid.setAttribute('name', `command[${counter}][project_id]`);

        command.setAttribute('label', 'Command');
        command.setAttribute('value', '');
        command.setAttribute('dmb-name', `command[${counter}][command]`);
        command.setAttribute('validate', 'required');

        form.appendChild(id);
        form.appendChild(projectid);
        form.appendChild(command);

        counter++;
        target.setAttribute('counter', counter);
    }
}

customElements.define('dmb-add-command', DmbAddCommand);
class DmbButtonAction extends DumboDirective {
    constructor() {
        super();
    }

    init() {
        const action = this.getAttribute('action') || '';
        let icon = '';

        this.classList.add('icon');
        this.classList.add('button');

        switch(action) {
            case 'edit':
                icon = 'icon-edit-pencil';
                break;
            case 'delete':
                icon = 'icon-trashcan';
                break;
            case 'new':
                icon = 'icon-plus1';
                break;
            case 'search':
                icon = 'icon-filter';
                break;
            case 'execute':
                icon = 'icon-chevron-right';
                break;
            case 'attachment':
                let type = this.getAttribute('file-type') || 'text2';
                icon = `icon-file-${type}`;
                break;
        }

		if (this.hasAttribute('icon')) {
			icon = (`${icon} `+this.getAttribute('icon')).trim();
		}

        if (icon.length) {
            this.classList.add(icon);
        }

        this.addEventListener('click', () => {
            this.handleClick();
        }, {capture: true, passive: true});
    }

    handleClick() {
        let panel = null;
        let form = null;
        const url = this.getAttribute('url');
        const target = this.getAttribute('target');
        const formToExec = this.getAttribute('form');
        const pageLoader = document.querySelector('#page-loader');
        const service = this.getAttribute('service');
		const init = {
            method: 'GET',
            body: null
        };

        switch (this.getAttribute('behavior')) {
            case 'exec-form':
                if(formToExec) {
                    form = document.querySelector(formToExec);
                    if(url) form.setAttribute('action', url);
                    if(target) form.setAttribute('target', target);
                    form.submit();
                }
            break;
            case 'open-panel':
                panel = document.querySelector(this.getAttribute('panel'));
                if(url) panel.setAttribute('source', url);
                panel.open();
            break;
            case 'launch-url':
                location.href = url;
            break;
            case 'run-service':
                window[`${service}`].run(JSON.parse(this.getAttribute('args')));
            break;
            case 'ajax':

                if (pageLoader) pageLoader.open();
				if (this.hasAttribute('method')) init.method = this.getAttribute('method');
				if (init.method === 'POST' || init.method === 'PUT') init.body = this.getAttribute('body');

                fetch(new Request(url, init))
                    .then(async response => {
						let ret = null;
						let resp = null;

						ret = response.json();

						if (!response.ok) {
							resp = await ret;
							throw resp.message;
						}

                        return ret;
                    })
                    .then(() => {
                        window.location.reload();
                    })
                    .catch(error => {
                        window.dmbDialogService.closeAll();
                        window.dmbDialogService.error(error);
						console.error(error);
                    });
            break;
        }
    }
}

customElements.define('dmb-button-action', DmbButtonAction);
class DmbEnvInput extends DumboDirective {
    constructor() {
        super();
        const template = `
            <div class="section group">
                <div class="col col5 col5-md col5-sm">
                    <dmb-input
                        label="Key"
                        dmb-value=""
                        dmb-name="env[][key]"
                        validate="required"
                    ></dmb-input>
                </div>
                <div class="col col5 col5-md col5-sm">
                    <dmb-input
                        label="Value"
                        dmb-value=""
                        dmb-name="env[][value]"
                    ></dmb-input>
                </div>
                <div class="col col2 col2-md col2-sm">
                    <div class="col col12">&nbsp;</div>
                    <div class="col col12">
                        <dmb-button class="del-env button button-error icon icon-cross"></dmb-button>
                    </div>
                </div>
            </div>
        `;
        this.setTemplate(template);
    }

    init() {
        let counter = 0;
        const inputs = this.querySelectorAll('dmb-input');
        const buttonDel = this.querySelector('dmb-button.del-env');

        if(this.hasAttribute('counter')) {
            counter = parseInt(this.getAttribute('counter'));
        }

        inputs[0].setAttribute('dmb-name', `env[${counter}][key]`);
        inputs[0].value = this.getAttribute('key');
        inputs[1].setAttribute('dmb-name', `env[${counter}][value]`);
        inputs[1].value = this.getAttribute('val');

        buttonDel.click(() => {
            this.remove();
        });
    }
}

customElements.define('dmb-env-input', DmbEnvInput);
class DmbEnvInputs extends DumboDirective {
    constructor() {
        super();

        const template = `
            <section transclude>
            </section>
            <section>
                <div class="section group">
                    <div class="col col6 col6-md col6-sm">
                        &nbsp;
                    </div>
                    <div class="col col6 col6-md col6-sm">
                        <dmb-button
                            class="add-var button button-primary icon icon-plus"
                        >Agregar</dmb-button>
                    </div>
                </div>
            </section>
        `;
        this.setTemplate(template);
    }

    init() {
        let counter = 0;
        let input = null;
        const inputsArea = this.querySelector('section[transclude]');
        const buttonAdd = this.querySelector('dmb-button.add-var');

        if(this.hasAttribute('counter')) {
            counter = parseInt(this.getAttribute('counter'));
        }

        buttonAdd.click(() => {
            input = document.createElement('dmb-env-input');
            input.setAttribute('counter', counter);
            inputsArea.appendChild(input);
            counter++;
        });
    }
}

customElements.define('dmb-env-inputs', DmbEnvInputs);
/**
 * Component handle login
 */

 class DmbLogin extends DumboDirective {
    #_form;

    constructor() {
        super();

        const template = '<dmb-form dmb-name="login" method="post" action="?" autocomplete="off" class="login" async>' +
                            '<dmb-input class="dmb-input" label="" validate="required" dmb-name="u" dmb-id="email"></dmb-input>' +
                            '<dmb-input class="dmb-input" label="" type="password" dmb-name="p" autocomplete="off" validate="required" dmb-id="password"></dmb-input>' +
                            '<dmb-button type="submit" class="button button-primary" id="login-button"></dmb-button>' +
                        '</dmb-form>';
        this.setTemplate(template);
        this.valids = [];
        this.#_form = null;
    }

    init() {
        const button = this.querySelector('dmb-button');
        const inputs = this.querySelectorAll('dmb-input');
        const target = this.getAttribute('target');
        let areaSelector = null;

        this.#_form = this.querySelector('dmb-form');
        inputs[0].setAttribute('label', this.getAttribute('user-label') || '');
        inputs[1].setAttribute('label', this.getAttribute('pass-label') || '');

        this.#_form.setAttribute('action', `${target}signin`);
        this.#_form.setAttribute('redirect', `${target}index`);
        this.#_form.callback = this.#_handleLogin;
        button.innerText = this.getAttribute('button-label') || '';

        if (target === '/guarda/') {
            areaSelector = document.createElement('dmb-select');
            areaSelector.setAttribute('label', 'Puesto Asignado');
            areaSelector.setAttribute('dmb-name', 'pos');
            areaSelector.setAttribute('validate', 'required');
            areaSelector.setAttribute('dmb-id', 'position');
            window.AreasModel.getGuardPositions()
                .then(data => {
                    data.unshift({value: '', text: 'Seleccione...'});
                    areaSelector.values = data;
                });
            this.#_form.querySelector('form').prepend(areaSelector);
        }
    }
    /**
     * Send fields to backend for login process
     */
    #_handleLogin() {
        const target = this.getAttribute('action');
        const redirect = this.getAttribute('redirect');
        const init = {
            method: 'POST',
            body: this.getFormData()
        };
        const loginRequest = new Request(target, init);

        fetch(loginRequest)
            .then(response => {
                if (!response.ok) throw new Error('Usuario o password incorrecto');
                return response.json();
            })
            .then(() => {
                window.location = redirect;
            })
            .catch(error => {
                window.dmbDialogService.error(error);
            });
    }
}

customElements.define('dmb-login', DmbLogin);
/**
 *
 */
class DmbSimpleForm extends DumboDirective {
    constructor () {
        super();
    }

    init() {
        const form = this.querySelector('dmb-form');
        const method = this.getAttribute('method') || 'POST';
        const init = {
            method,
            body: null
        };
        const accept = this.getAttribute('accept') || 'json';
        const result = this.getAttribute('result') || 'info';
        const size = this.getAttribute('size') || 'large';
        const noreload = this.hasAttribute('no-reload');
        const pageLoader = document.querySelector('#page-loader');
        let fullReload = false;
        let data = null;
        let url = form.getAttribute('action');

        form.callback = (e) => {
            fullReload = this.hasAttribute('full-reload');

            init.method = init.method || form.getAttribute('method');
            init.body = init.method === 'POST' ? form.getFormData() : null;

            if (init.method === 'GET') {
                data = new URLSearchParams(form.getFormData()).toString();
                url = `${url}?${data}`
            }
            pageLoader.classList.add('active');
            const request = new Request(url, init);

            fetch(request)
                .then(async response => {
                    let ret = null;
					let resp = null

                    switch (accept) {
                        case 'html':
                            ret = response.text();
                        break;
                        case 'json':
                        default:
                            ret = response.json();
                        break;
                    }

					if (!response.ok && accept === 'json') {
						resp = await ret;
						throw new Error(resp.message);							
					}

                    return ret;
                })
                .then(resp => {
                    pageLoader.classList.remove('active');
                    window.dmbDialogService.closeAll();
                    switch (result) {
                        case 'drawer':
                            window.dmbDialogService.drawer(resp, size);
                        break;
                        case 'new-window':
                            window.open(resp.openUrl);
                        break;
						case 'self':
							location.assign(resp.openUrl);
						break;
                        case 'info':
                        default:
                            window.dmbDialogService.info(resp.message);
                        break;
                    }
                })
                .catch(error => {
                    pageLoader.classList.remove('active');
                    window.dmbDialogService.closeAll();
                    window.dmbDialogService.error(error.message);
                    console.error(error.message);
                }).finally(() => {
                    if (!noreload) {
                        setTimeout(() => {
                            fullReload ? location.replace(location.href) : location.reload();
                        }, 3000);
                    }
                });
        };
    }
}

customElements.define('dmb-simple-form', DmbSimpleForm);
